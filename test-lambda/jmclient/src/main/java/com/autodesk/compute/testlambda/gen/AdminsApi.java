/*
 * CloudOS Compute API
 * CloudOS Compute API for batch style workloads in Autodesk. Developers can register compute worker types by following the cloudOS2.0 onboarding process. Users can submit jobs against registered worker types. The system treats input and output as opaque JSON payloads that must confirm to the JSON schema specified by the worker documentation outside this system. All APIs are used with the /api/v1 prefix.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: cloudos-compute@autodesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.autodesk.compute.testlambda.gen;

import com.autodesk.compute.common.model.HealthCheckResponse;
import com.autodesk.compute.testlambda.gen.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminsApi {
    private ApiClient localVarApiClient;

    public AdminsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminsApi(final ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(final ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for healthcheckGet
     *
     * @param xVaultToken (optional)
     * @param xUser       (optional)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call healthcheckGetCall(final String xVaultToken, final String xUser, final ApiCallback _callback) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/healthcheck";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        final Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        final Map<String, String> localVarCookieParams = new HashMap<String, String>();
        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVaultToken != null) {
            localVarHeaderParams.put("x-vault-token", localVarApiClient.parameterToString(xVaultToken));
        }

        if (xUser != null) {
            localVarHeaderParams.put("x-user", localVarApiClient.parameterToString(xUser));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        final String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthcheckGetValidateBeforeCall(final String xVaultToken, final String xUser, final ApiCallback _callback) throws ApiException {


        final okhttp3.Call localVarCall = healthcheckGetCall(xVaultToken, xUser, _callback);
        return localVarCall;

    }

    /**
     * Health Check
     * Returns the health of the Service with details. If health is OK, returns 200.
     *
     * @param xVaultToken (optional)
     * @param xUser       (optional)
     * @return HealthCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     * </table>
     */
    public HealthCheckResponse healthcheckGet(final String xVaultToken, final String xUser) throws ApiException {
        final ApiResponse<HealthCheckResponse> localVarResp = healthcheckGetWithHttpInfo(xVaultToken, xUser);
        return localVarResp.getData();
    }

    /**
     * Health Check
     * Returns the health of the Service with details. If health is OK, returns 200.
     *
     * @param xVaultToken (optional)
     * @param xUser       (optional)
     * @return ApiResponse&lt;HealthCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<HealthCheckResponse> healthcheckGetWithHttpInfo(final String xVaultToken, final String xUser) throws ApiException {
        final okhttp3.Call localVarCall = healthcheckGetValidateBeforeCall(xVaultToken, xUser, null);
        final Type localVarReturnType = new TypeToken<HealthCheckResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Health Check (asynchronously)
     * Returns the health of the Service with details. If health is OK, returns 200.
     *
     * @param xVaultToken (optional)
     * @param xUser       (optional)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call healthcheckGetAsync(final String xVaultToken, final String xUser, final ApiCallback<HealthCheckResponse> _callback) throws ApiException {

        final okhttp3.Call localVarCall = healthcheckGetValidateBeforeCall(xVaultToken, xUser, _callback);
        final Type localVarReturnType = new TypeToken<HealthCheckResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
