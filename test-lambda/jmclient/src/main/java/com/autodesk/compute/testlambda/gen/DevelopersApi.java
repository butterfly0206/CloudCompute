/*
 * CloudOS Compute API
 * CloudOS Compute API for batch style workloads in Autodesk. Developers can register compute worker types by following the cloudOS2.0 onboarding process. Users can submit jobs against registered worker types. The system treats input and output as opaque JSON payloads that must confirm to the JSON schema specified by the worker documentation outside this system. All APIs are used with the /api/v1 prefix.
 *
 * The version of the OpenAPI document: 1.0.18
 * Contact: cloudos-compute@autodesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.autodesk.compute.testlambda.gen;

import com.autodesk.compute.common.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevelopersApi {
    private ApiClient localVarApiClient;

    public DevelopersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevelopersApi(final ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(final ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createJob
     * @param jobArgs Job creation arguments (required)
     * @param noBatch True to tell the Job Manager not to schedule a batch worker (e.g. so a test worker can pick it up via polling) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call createJobCall(final JobArgs jobArgs, final Boolean noBatch, final ApiCallback _callback) throws ApiException {
        final Object localVarPostBody = jobArgs;

        // create path and map variables
        final String localVarPath = "/jobs";

        final List<Pair> localVarQueryParams = new ArrayList<>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        final Map<String, String> localVarHeaderParams = new HashMap<>();
        final Map<String, String> localVarCookieParams = new HashMap<>();
        final Map<String, Object> localVarFormParams = new HashMap<>();

        if (noBatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noBatch", noBatch));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        final String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobValidateBeforeCall(final JobArgs jobArgs, final Boolean noBatch, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'jobArgs' is set
        if (jobArgs == null) {
            throw new ApiException("Missing the required parameter 'jobArgs' when calling createJob(Async)");
        }


        final okhttp3.Call localVarCall = createJobCall(jobArgs, noBatch, _callback);
        return localVarCall;

    }

    /**
     * Creates a job in the system
     * Creates a job for a particular compute worker type. Jobs are immutable from the client point of view once created and cannot be modified. A job will go through its own state machine and succeed or fail for various reasons including a worker-specific (defaults to 1 hour) or a worker no-longer heartbeating its progress (by default, required every 2 minutes). All jobs will be deleted from the system after 30 days of lifetime. Input payload for the job must comply with the JSON specification provided by the job worker developer. 
     * @param jobArgs Job creation arguments (required)
     * @param noBatch True to tell the Job Manager not to schedule a batch worker (e.g. so a test worker can pick it up via polling) (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public Job createJob(final JobArgs jobArgs, final Boolean noBatch) throws ApiException {
        final ApiResponse<Job> localVarResp = createJobWithHttpInfo(jobArgs, noBatch);
        return localVarResp.getData();
    }

    /**
     * Creates a job in the system
     * Creates a job for a particular compute worker type. Jobs are immutable from the client point of view once created and cannot be modified. A job will go through its own state machine and succeed or fail for various reasons including a worker-specific (defaults to 1 hour) or a worker no-longer heartbeating its progress (by default, required every 2 minutes). All jobs will be deleted from the system after 30 days of lifetime. Input payload for the job must comply with the JSON specification provided by the job worker developer. 
     * @param jobArgs Job creation arguments (required)
     * @param noBatch True to tell the Job Manager not to schedule a batch worker (e.g. so a test worker can pick it up via polling) (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Job> createJobWithHttpInfo(final JobArgs jobArgs, final Boolean noBatch) throws ApiException {
        final okhttp3.Call localVarCall = createJobValidateBeforeCall(jobArgs, noBatch, null);
        final Type localVarReturnType = new TypeToken<Job>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a job in the system (asynchronously)
     * Creates a job for a particular compute worker type. Jobs are immutable from the client point of view once created and cannot be modified. A job will go through its own state machine and succeed or fail for various reasons including a worker-specific (defaults to 1 hour) or a worker no-longer heartbeating its progress (by default, required every 2 minutes). All jobs will be deleted from the system after 30 days of lifetime. Input payload for the job must comply with the JSON specification provided by the job worker developer. 
     * @param jobArgs Job creation arguments (required)
     * @param noBatch True to tell the Job Manager not to schedule a batch worker (e.g. so a test worker can pick it up via polling) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call createJobAsync(final JobArgs jobArgs, final Boolean noBatch, final ApiCallback<Job> _callback) throws ApiException {

        final okhttp3.Call localVarCall = createJobValidateBeforeCall(jobArgs, noBatch, _callback);
        final Type localVarReturnType = new TypeToken<Job>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createJobs
     * @param jobArgs Array Job creation arguments (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call createJobsCall(final ArrayJobArgs jobArgs, final ApiCallback _callback) throws ApiException {
        final Object localVarPostBody = jobArgs;

        // create path and map variables
        final String localVarPath = "/jobs/array";

        final List<Pair> localVarQueryParams = new ArrayList<>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        final Map<String, String> localVarHeaderParams = new HashMap<>();
        final Map<String, String> localVarCookieParams = new HashMap<>();
        final Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        final String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobsValidateBeforeCall(final ArrayJobArgs jobArgs, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'jobArgs' is set
        if (jobArgs == null) {
            throw new ApiException("Missing the required parameter 'jobArgs' when calling createJobs(Async)");
        }


        final okhttp3.Call localVarCall = createJobsCall(jobArgs, _callback);
        return localVarCall;

    }

    /**
     * Creates array of jobs in the system
     * Creates array of jobs a particular compute worker type. Jobs are immutable from the client point of view once created and cannot be modified. A job will go through its own state machine and succeed or fail for various reasons including a worker-specific (defaults to 1 hour) or a worker no-longer heartbeating its progress (by default, required every 2 minutes). All jobs will be deleted from the system after 30 days of lifetime. Input payload for the job must comply with the JSON specification provided by the job worker developer. 
     * @param jobArgs Array Job creation arguments (required)
     * @return ArrayJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public ArrayJob createJobs(final ArrayJobArgs jobArgs) throws ApiException {
        final ApiResponse<ArrayJob> localVarResp = createJobsWithHttpInfo(jobArgs);
        return localVarResp.getData();
    }

    /**
     * Creates array of jobs in the system
     * Creates array of jobs a particular compute worker type. Jobs are immutable from the client point of view once created and cannot be modified. A job will go through its own state machine and succeed or fail for various reasons including a worker-specific (defaults to 1 hour) or a worker no-longer heartbeating its progress (by default, required every 2 minutes). All jobs will be deleted from the system after 30 days of lifetime. Input payload for the job must comply with the JSON specification provided by the job worker developer. 
     * @param jobArgs Array Job creation arguments (required)
     * @return ApiResponse&lt;ArrayJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<ArrayJob> createJobsWithHttpInfo(final ArrayJobArgs jobArgs) throws ApiException {
        final okhttp3.Call localVarCall = createJobsValidateBeforeCall(jobArgs, null);
        final Type localVarReturnType = new TypeToken<ArrayJob>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates array of jobs in the system (asynchronously)
     * Creates array of jobs a particular compute worker type. Jobs are immutable from the client point of view once created and cannot be modified. A job will go through its own state machine and succeed or fail for various reasons including a worker-specific (defaults to 1 hour) or a worker no-longer heartbeating its progress (by default, required every 2 minutes). All jobs will be deleted from the system after 30 days of lifetime. Input payload for the job must comply with the JSON specification provided by the job worker developer. 
     * @param jobArgs Array Job creation arguments (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job created and either scheduled or queued </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> job created but with schedule pending </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call createJobsAsync(final ArrayJobArgs jobArgs, final ApiCallback<ArrayJob> _callback) throws ApiException {

        final okhttp3.Call localVarCall = createJobsValidateBeforeCall(jobArgs, _callback);
        final Type localVarReturnType = new TypeToken<ArrayJob>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteJob
     * @param id ID of job to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job deleted </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> Request is accepted in case of an array job and deletion is done asynchronously </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> job id is invalid or trying to delete completed job </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> job is already in a terminal state </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call deleteJobCall(final String id, final ApiCallback _callback) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/jobs/{id}"
                .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        final Map<String, String> localVarHeaderParams = new HashMap<>();
        final Map<String, String> localVarCookieParams = new HashMap<>();
        final Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        final String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobValidateBeforeCall(final String id, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteJob(Async)");
        }


        final okhttp3.Call localVarCall = deleteJobCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a single job for given job ID. A job can be deleted at any stage of its lifecycle. Since jobs are immutable, delete is synonymous to cancel and no separate cancel api is needed. 
     * @param id ID of job to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job deleted </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> Request is accepted in case of an array job and deletion is done asynchronously </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> job id is invalid or trying to delete completed job </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> job is already in a terminal state </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public void deleteJob(final String id) throws ApiException {
        deleteJobWithHttpInfo(id);
    }

    /**
     * 
     * Deletes a single job for given job ID. A job can be deleted at any stage of its lifecycle. Since jobs are immutable, delete is synonymous to cancel and no separate cancel api is needed. 
     * @param id ID of job to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job deleted </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> Request is accepted in case of an array job and deletion is done asynchronously </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> job id is invalid or trying to delete completed job </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> job is already in a terminal state </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Void> deleteJobWithHttpInfo(final String id) throws ApiException {
        final okhttp3.Call localVarCall = deleteJobValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a single job for given job ID. A job can be deleted at any stage of its lifecycle. Since jobs are immutable, delete is synonymous to cancel and no separate cancel api is needed. 
     * @param id ID of job to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job deleted </td><td>  -  </td></tr>
    <tr><td> 202 </td><td> Request is accepted in case of an array job and deletion is done asynchronously </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> job id is invalid or trying to delete completed job </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> job is already in a terminal state </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call deleteJobAsync(final String id, final ApiCallback<Void> _callback) throws ApiException {

        final okhttp3.Call localVarCall = deleteJobValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getJob
     * @param id ID of job to fetch (required)
     * @param nextToken The list of jobs in array may be paginated and the nextToken is used to request the next page. The nextToken will be empty or null if there are no more pages.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job details response </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> job not found </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getJobCall(final String id, final String nextToken, final ApiCallback _callback) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/jobs/{id}"
                .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        final Map<String, String> localVarHeaderParams = new HashMap<>();
        final Map<String, String> localVarCookieParams = new HashMap<>();
        final Map<String, Object> localVarFormParams = new HashMap<>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        final String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(final String id, final String nextToken, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJob(Async)");
        }


        final okhttp3.Call localVarCall = getJobCall(id, nextToken, _callback);
        return localVarCall;

    }

    /**
     * Returns a single job for given job ID
     *
     * @param id        ID of job to fetch (required)
     * @param nextToken The list of jobs in array may be paginated and the nextToken is used to request the next page. The nextToken will be empty or null if there are no more pages.  (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> job details response </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> job not found </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     * </table>
     */
    public Job getJob(final String id, final String nextToken) throws ApiException {
        final ApiResponse<Job> localVarResp = getJobWithHttpInfo(id, nextToken);
        return localVarResp.getData();
    }

    /**
     * Returns a single job for given job ID
     *
     * @param id        ID of job to fetch (required)
     * @param nextToken The list of jobs in array may be paginated and the nextToken is used to request the next page. The nextToken will be empty or null if there are no more pages.  (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> job details response </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> job not found </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Job> getJobWithHttpInfo(final String id, final String nextToken) throws ApiException {
        final okhttp3.Call localVarCall = getJobValidateBeforeCall(id, nextToken, null);
        final Type localVarReturnType = new TypeToken<Job>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single job for given job ID
     * @param id ID of job to fetch (required)
     * @param nextToken The list of jobs in array may be paginated and the nextToken is used to request the next page. The nextToken will be empty or null if there are no more pages.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> job details response </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> job not found </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getJobAsync(final String id, final String nextToken, final ApiCallback<Job> _callback) throws ApiException {

        final okhttp3.Call localVarCall = getJobValidateBeforeCall(id, nextToken, _callback);
        final Type localVarReturnType = new TypeToken<Job>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for searchRecentJobs
     * @param service Your appdef moniker (required)
     * @param maxResults Maximum number of results to return for each query page (may be limited still by aggregate data size &lt;&#x3D; 1 MB)  (required)
     * @param fromTime Start searching from this time onwards, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param toTime Start searching up to and including this time, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param tag Filter your search results by this tag. (optional)
     * @param nextToken Internal token used for search pagination, returned in search results for queries which span multiple pages  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> List of recently modified jobs and possibly a NextToken object </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> Service unavailable, try again later </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> Unexpected error encountered during the search operation </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call searchRecentJobsCall(final String service, final Integer maxResults, final String fromTime, final String toTime, final String tag, final String nextToken, final ApiCallback _callback) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/search/recent";

        final List<Pair> localVarQueryParams = new ArrayList<>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        final Map<String, String> localVarHeaderParams = new HashMap<>();
        final Map<String, String> localVarCookieParams = new HashMap<>();
        final Map<String, Object> localVarFormParams = new HashMap<>();

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (fromTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromTime", fromTime));
        }

        if (toTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toTime", toTime));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (nextToken != null) {
            localVarHeaderParams.put("nextToken", localVarApiClient.parameterToString(nextToken));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        final String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecentJobsValidateBeforeCall(final String service, final Integer maxResults, final String fromTime, final String toTime, final String tag, final String nextToken, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling searchRecentJobs(Async)");
        }

        // verify the required parameter 'maxResults' is set
        if (maxResults == null) {
            throw new ApiException("Missing the required parameter 'maxResults' when calling searchRecentJobs(Async)");
        }


        final okhttp3.Call localVarCall = searchRecentJobsCall(service, maxResults, fromTime, toTime, tag, nextToken, _callback);
        return localVarCall;

    }

    /**
     * Search recently (up to 30 days) modified jobs, regardless of status.
     * Returns any recent job regardless of status within the time scope. The item order in the pages returned is arbitrary. A single query operation can retrieve a variable number of items, limited by the lesser of a maximum of 1 MB of data or maxResults (# of items per page). 
     * @param service Your appdef moniker (required)
     * @param maxResults Maximum number of results to return for each query page (may be limited still by aggregate data size &lt;&#x3D; 1 MB)  (required)
     * @param fromTime Start searching from this time onwards, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param toTime Start searching up to and including this time, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param tag Filter your search results by this tag. (optional)
     * @param nextToken Internal token used for search pagination, returned in search results for queries which span multiple pages  (optional)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> List of recently modified jobs and possibly a NextToken object </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> Service unavailable, try again later </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> Unexpected error encountered during the search operation </td><td>  -  </td></tr>
    </table>
     */
    public SearchResult searchRecentJobs(final String service, final Integer maxResults, final String fromTime, final String toTime, final String tag, final String nextToken) throws ApiException {
        final ApiResponse<SearchResult> localVarResp = searchRecentJobsWithHttpInfo(service, maxResults, fromTime, toTime, tag, nextToken);
        return localVarResp.getData();
    }

    /**
     * Search recently (up to 30 days) modified jobs, regardless of status.
     * Returns any recent job regardless of status within the time scope. The item order in the pages returned is arbitrary. A single query operation can retrieve a variable number of items, limited by the lesser of a maximum of 1 MB of data or maxResults (# of items per page). 
     * @param service Your appdef moniker (required)
     * @param maxResults Maximum number of results to return for each query page (may be limited still by aggregate data size &lt;&#x3D; 1 MB)  (required)
     * @param fromTime Start searching from this time onwards, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param toTime Start searching up to and including this time, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param tag Filter your search results by this tag. (optional)
     * @param nextToken Internal token used for search pagination, returned in search results for queries which span multiple pages  (optional)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> List of recently modified jobs and possibly a NextToken object </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> Service unavailable, try again later </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> Unexpected error encountered during the search operation </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<SearchResult> searchRecentJobsWithHttpInfo(final String service, final Integer maxResults, final String fromTime, final String toTime, final String tag, final String nextToken) throws ApiException {
        final okhttp3.Call localVarCall = searchRecentJobsValidateBeforeCall(service, maxResults, fromTime, toTime, tag, nextToken, null);
        final Type localVarReturnType = new TypeToken<SearchResult>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search recently (up to 30 days) modified jobs, regardless of status. (asynchronously)
     * Returns any recent job regardless of status within the time scope. The item order in the pages returned is arbitrary. A single query operation can retrieve a variable number of items, limited by the lesser of a maximum of 1 MB of data or maxResults (# of items per page). 
     * @param service Your appdef moniker (required)
     * @param maxResults Maximum number of results to return for each query page (may be limited still by aggregate data size &lt;&#x3D; 1 MB)  (required)
     * @param fromTime Start searching from this time onwards, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param toTime Start searching up to and including this time, expressed in milliseconds since midnight January 1, 1970.  (optional)
     * @param tag Filter your search results by this tag. (optional)
     * @param nextToken Internal token used for search pagination, returned in search results for queries which span multiple pages  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> List of recently modified jobs and possibly a NextToken object </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> Service unavailable, try again later </td><td>  -  </td></tr>
    <tr><td> 0 </td><td> Unexpected error encountered during the search operation </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call searchRecentJobsAsync(final String service, final Integer maxResults, final String fromTime, final String toTime, final String tag, final String nextToken, final ApiCallback<SearchResult> _callback) throws ApiException {

        final okhttp3.Call localVarCall = searchRecentJobsValidateBeforeCall(service, maxResults, fromTime, toTime, tag, nextToken, _callback);
        final Type localVarReturnType = new TypeToken<SearchResult>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
