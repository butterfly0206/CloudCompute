# coding: utf-8

"""
    CloudOS Compute API

    CloudOS Compute API for batch style workloads in Autodesk. Developers can register compute worker types by following the cloudOS2.0 onboarding process. Users can submit jobs against registered worker types. The system treats input and output as opaque JSON payloads that must confirm to the JSON schema specified by the worker documentation outside this system. All APIs are used with the /api/v1 prefix. 

    The version of the OpenAPI document: 1.0.19
    Contact: cloudos-compute@autodesk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from jmclient.models.job_info import JobInfo
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ArrayJobResult(BaseModel):
    """
    ArrayJobResult
    """
    service: StrictStr = Field(description="An appdef moniker")
    worker: StrictStr = Field(description="The particular worker within a service")
    portfolio_version: Optional[StrictStr] = Field(default=None, description="The portfolio version of the worker", alias="portfolioVersion")
    job_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Parent job ID assigned to all the jobs in the array", alias="jobID")
    jobs: Optional[List[JobInfo]] = Field(default=None, description="Array all the jobs crated")
    next_token: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The list of child jobs in array may be paginated and the nextToken is used to request the next page. The nextToken will be empty or null if there are no more pages. ", alias="nextToken")
    type: Optional[StrictStr] = 'ArrayJobResult'
    __properties: ClassVar[List[str]] = ["service", "worker", "portfolioVersion", "jobID", "jobs", "nextToken", "type"]

    @field_validator('job_id')
    def job_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(:array(:(0|([1-9]\d{0,3})))?)?", value):
            raise ValueError(r"must validate the regular expression /[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(:array(:(0|([1-9]\d{0,3})))?)?/")
        return value

    @field_validator('next_token')
    def next_token_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ArrayJobResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of ArrayJobResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "service": obj.get("service"),
            "worker": obj.get("worker"),
            "portfolioVersion": obj.get("portfolioVersion"),
            "jobID": obj.get("jobID"),
            "jobs": [JobInfo.from_dict(_item) for _item in obj.get("jobs")] if obj.get("jobs") is not None else None,
            "nextToken": obj.get("nextToken"),
            "type": obj.get("type") if obj.get("type") is not None else 'ArrayJobResult'
        })
        return _obj


